{% extends 'layouts/page.njk' %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/button/macro.njk" import govukButton %}

{% block content %}
  {{ appHeading({
    text: heading
  }) }}

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
    <div class="govuk-grid-row" style="margin-bottom:20px;">
      <div class="govuk-grid-column-one-half">
        <div>
          <h2 class="govuk-heading-m govuk">Sessions & Traces</h2>
          <h2 class="govuk-heading-s govuk">Total sessions tracked:</h2>
          <h2 class="govuk-heading-l govuk"><a href="/project/{{project.id}}/sessions" class="govuk-link">{{ dashboard.totalSession }}</a></h2>
          <h2 class="govuk-heading-s govuk">Total traces tracked:</h2>
          <h2 class="govuk-heading-l govuk">{{ dashboard.totalThreads.totalThreads }}</h2>
        </div>
      </div>
      <div class="govuk-grid-column-one-half">
        <div>
          <h2 class="govuk-heading-m govuk">Model cost</h2>
          <h2 class="govuk-heading-s govuk">Total cost:</h2>
          <h2 class="govuk-heading-l govuk">£{{ dashboard.totalCost }}</h2>
          <table class="govuk-table">
            <thead class="govuk-table__head">
              <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">Model</th>
                <th scope="col" class="govuk-table__header">Input</th>
                <th scope="col" class="govuk-table__header">Output</th>
                <th scope="col" class="govuk-table__header">Total</th>
                <th scope="col" class="govuk-table__header">Cost</th>
              </tr>
            </thead>
            <tbody class="govuk-table__body">
            {% for item in dashboard.tokenUsage %}
              <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">{{ item.model }}</th>
                <td class="govuk-table__cell">{{ item.totalInputTokens }}</td>
                <td class="govuk-table__cell">{{ item.totalOutputTokens }}</td>
                <td class="govuk-table__cell">{{ item.totalTokens }}</td>
                <td class="govuk-table__cell">£{{  item.cost }}</td>
              </tr>
            {% endfor %}
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <div class="govuk-grid-row" style="margin-bottom:20px;">
      <div class="govuk-grid-column-one-half">
        <div>
          <h2 class="govuk-heading-m govuk">Sessions by day</h2>
          <canvas id="graph1"></canvas>
        </div>
      </div>
      <div class="govuk-grid-column-one-half">
        <div>
          <h2 class="govuk-heading-m govuk">Threads by day</h2>
          <canvas id="graph2"></canvas>
        </div>
      </div>
    </div>
    <div class="govuk-grid-row">
      <div class="govuk-grid-column-one-half">
        <div>
          <h2 class="govuk-heading-m govuk">Model Usage - Tokens</h2>
          <canvas id="graph3"></canvas>
        </div>
      </div>
      <div class="govuk-grid-column-one-half">
        <div>
          <h2 class="govuk-heading-m govuk">Model Usage - Cost</h2>
          <canvas id="graph4"></canvas>
        </div>
      </div>
    </div>
  </div>

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
    <p></p>
    <form method="POST" action="/data/generate/{{project.id}}">
      {{ govukButton({
        text: "Generate Syntethic Data",
        id: "submit"
      }) }}
    </form>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
  document.addEventListener('DOMContentLoaded', function () {
    function lineChartWithData(ctx, title, data) { // eslint-disable-line
      const labels = data.map((d) => d.label)
      const values = data.map((d) => d.value)
      const color = getRandomColor()
      const chartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          labels,
          datasets: [
            {
              label: title,
              data: values,
              borderWidth: 1,
              borderColor: color,
              backgroundColor: color + '33'
            }
          ]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      })

      chartInstance.update()
    }

    function getRandomColor() {
      const letters = '0123456789ABCDEF'
      let color = '#'
      for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)]
      }
      return color
    }

    function lineChartWithMultipleData(ctx, data, xName, yName, labelName) { // eslint-disable-line
      const labels = [...new Set(data.map((d) => d[xName]))]

      const models = [...new Set(data.map((d) => d[labelName]))]

      const datasets = models.map((model) => {
        const modelData = data.filter((d) => d[labelName] === model)
        const values = labels.map((label) => {
          const entry = modelData.find((d) => d[xName] === label)
          return entry ? entry[yName] : 0
        })
        const color = getRandomColor()
        return {
          label: model,
          data: values,
          borderWidth: 1,
          borderColor: color,
          backgroundColor: color + '33'
        }
      })

      const chartInstance = new Chart(ctx, {
        type: 'line',
        data: {
          labels,
          datasets
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      })

      chartInstance.update()
    }

    const sessionsPerDay = {{ dashboard.sessionsByDay | dump | safe  }}
    const threadsPerDay = {{ dashboard.totalThreadsByDay | dump | safe  }}
    const modelTokenGraphData = {{ dashboard.tokenUsageByModel | dump | safe  }}

    const graph1 = document.getElementById('graph1')
    lineChartWithData(graph1, '# of sessions', sessionsPerDay)

    const graph2 = document.getElementById('graph2')
    lineChartWithData(graph2, '# of threads', threadsPerDay)

    const graph3 = document.getElementById('graph3')
    lineChartWithMultipleData(graph3, modelTokenGraphData, 'day', 'totalTokens', 'model')

    const graph4 = document.getElementById('graph4')
    lineChartWithMultipleData(graph4, modelTokenGraphData, 'day', 'cost', 'model')
    })
  </script>
{% endblock %}
